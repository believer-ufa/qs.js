var src = {"angular":{"description":"Js quickstart for angular","config":{"source":"https://gist.github.com/jtrussell/13a772d812053e2e76f8"},"data":{"js":"var app = angular.module('jsbin', []);\n\napp.controller('DemoCtrl', function() {\n  this.name = 'World';\n});\n","html":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Angular JS</title>\n</head>\n<body ng-app=\"jsbin\">\n<div ng-controller=\"DemoCtrl as demo\">\n    <h1>Hello {{demo.name}}!</h1>\n</div>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.7/angular.js\"></script>\n</body>\n</html>\n","css":false}},"angular2":{"description":"JsBin quickstart for Angular 2","data":{"js":"var List = ng.Component({\n  selector: 'list',\n  directives: [ng.NgFor],\n  template: '<div>Hello, {{hello}}!</div>'\n}).Class({\n  constructor: function(){\n    this.hello = 'world';\n  }\n});\n\nng.bootstrap(List);\n","html":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>JS Bin</title>\n    <script src=\"https://code.angularjs.org/2.0.0-alpha.46/angular2.sfx.dev.js\"></script>\n</head>\n<body>\n\n<list></list>\n\n</body>\n</html>\n","css":false}},"d3":{"description":"Js quickstart for d3","data":{"js":"var svg = d3.select(\"svg\");\n\nvar circle = svg.selectAll(\"circle\")\n  .data([32, 57, 112, 293])\n  .enter()\n  .append(\"circle\")\n  .attr(\"cy\", 60)\n  .attr(\"cx\", function(d, i) { return i * 100 + 30; })\n  .attr(\"r\", function(d) { return Math.sqrt(d); });\n","html":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=utf-8 />\n    <script src=\"http://d3js.org/d3.v3.js\"></script>\n</head>\n<body>\n<svg id = \"svg\" width = 500 height = 500></svg>\n</body>\n</html>\n","css":false}},"ember":{"description":"Js quickstart for Ember","config":{"jsbinLink":"http://emberjs.jsbin.com/"},"data":{"js":false,"html":false,"css":false}},"jasmine":{"description":"Js quickstart for Jasmine","config":{"source":"http://searls.github.io/jasmine-all/"},"data":{"js":"describe(\"A suite\", function() {\n  it(\"contains spec with an expectation\", function() {\n    expect(true).toBe(true);\n  });\n});\n","html":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=utf-8 />\n    <title>Jasmine JsBin Quickstart</title>\n    <script type=\"text/javascript\" src=\"http://sukima.github.com/jasmine-all/jasmine-all-min.js\"></script>\n</head>\n<body>\n</body>\n</html>\n","css":false}},"mocha-chai":{"description":"Js quickstart for Mocha + Chai","data":{"js":"mocha.setup('bdd');\nvar expect = chai.expect;\n\ndescribe('A suite', function() {\n  it('contains spec with an expectation', function() {\n    expect(true).to.equal(true);\n  });\n});\n\nmocha.run();\n","html":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Mocha jsbin quickstart</title>\n    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/mocha/2.3.3/mocha.css\">\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/mocha/2.3.3/mocha.js\"></script>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/chai/3.4.1/chai.js\"></script>\n</head>\n<body>\n<div id=\"mocha\"></div>\n</body>\n</html>\n","css":false}},"processing":{"description":"Js quickstart for processing","data":{"js":"start(function(){\n\n  background(255,200,100);\n  rect(10,10,100,100);\n\n}, {globals: true});\n","html":"<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/processing.js/1.4.1/processing-api.min.js\"></script>\n\n    <script>\n        function start(callback, config) {\n            config = config || {};\n\n            function sketchProc(processing) {\n                if (config.globals) {\n                    for (var i in processing) {\n                        if (typeof processing[i] === 'function') {\n                            window[i] = processing[i].bind(processing);\n                        }\n                    }\n                }\n\n                processing.draw = callback\n                processing.setup = function () {\n                    size(500, 500);\n                }\n            }\n\n            var canvas = document.getElementById(\"canvas\");\n            var p = new Processing(canvas, sketchProc);\n        }\n\n    </script>\n    <meta charset=\"utf-8\">\n    <title>JS Bin</title>\n</head>\n<body>\n<canvas id=\"canvas\"></canvas>\n</body>\n\n</html>\n","css":false}},"react-jsx":{"description":"JsBin quickstart for React + JSX","data":{"js":"var Hello = React.createClass({\n  render: function() {\n    return (\n      <h1>Hello {this.props.name}!</h1>\n    );\n  }\n});\n\nReactDOM.render(\n<Hello name=\"World\" />,\n  document.getElementById('container')\n);\n","html":"<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"//fb.me/react-0.14.1.js\"></script>\n    <script src=\"//fb.me/react-dom-0.14.1.js\"></script>\n    <meta charset=\"utf-8\">\n    <title>React JSBin Quickstart</title>\n</head>\n<body>\n<div id=\"container\"></div>\n</body>\n</html>\n","css":false}},"react-redux":{"description":"Js quickstart for React + Redux","config":{"source":"https://twitter.com/dan_abramov/status/663002368976560129"},"data":{"js":"/*\n * How is the next application state calculated,\n * given the current state and the action?\n */\nconst counter = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    case 'DECREMENT':\n      return state - 1;\n    default:\n      return state;\n  }\n}\n\n/*\n * What does UI look like, assuming it doesn't know\n * about the state or actions, and is a function\n * of the props?\n */\nconst Counter = ({\n  value,\n  onIncrement,\n  onDecrement\n  }) => (\n  <div>\n    <h1>{value}</h1>\n    <button onClick={onIncrement}>+</button>\n    <button onClick={onDecrement}>-</button>\n  </div>\n);\n\n/*\n * Which injected props should be calculated\n * from the application state and how?\n */\nconst mapStateToProps = (state) => {\n  return {\n    value: state\n  };\n}\n\n/*\n * Which injected props should be callbacks\n * that dispatch actions, and which actions?\n */\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onIncrement: () => {\n      dispatch({\n        type: 'INCREMENT'\n      })\n    },\n    onDecrement: () => {\n      dispatch({\n        type: 'DECREMENT'\n      })\n    }\n  };\n};\n\n/*\n * Let's create a container component\n * that injects props into the pure UI component\n * according to the instructions above, but\n * instead of all those props, accepts a store.\n */\nconst { connect } = ReactRedux;\nconst CounterContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Counter);\n\n/*\n * Let's create a store.\n */\nconst { createStore } = Redux;\nconst store = createStore(counter);\n\n/*\n * Finally, render the container,\n * passing the store to it.\n */\nReactDOM.render(\n  <CounterContainer store={store} />,\n  document.getElementById('root')\n);\n","html":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>JS Bin</title>\n    <script src=\"https://fb.me/react-0.14.1.min.js\"></script>\n    <script src=\"https://fb.me/react-dom-0.14.1.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.0.4/redux.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/4.0.0/react-redux.min.js\"></script>\n</head>\n<body>\n<div id='root'></div>\n</body>\n</html>\n","css":false}}}